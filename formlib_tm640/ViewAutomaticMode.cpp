/*============================================================================+|  Class    : ViewAutomaticMode library                                  			||  Task     : ViewAutomaticMode library  header file                     			||-----------------------------------------------------------------------------||  Compile  :G++(GCC)3.2                                                     	||  Link     :G++(GCC)3.2                                                     	||  Call     :                                                                	||-----------------------------------------------------------------------------||  Author   : Sunny		                                                     		| |  Version  : V1.00                                                          	||  Creation : 			                                                     			||  Revision :           			                                         				|+============================================================================*///Mario rewrite#include	"ViewAutomaticMode.h"#include	"../tmdebug.h"#include	"../taskcnc.h"#include	"../curve.h"#include 	"../tmshmsg.h"#include 	"../memo.h"#include	"../tmconfig.h"#include	"../libCNCComm.h"#include	"../lib/libComm.h"/*============================================================================+|           Constant                                                     			|+============================================================================*/#define		SPEED_INITIAL			0#define		SPEED_PLUS				1#define		SPEED_MINUS				2#define SIGN(A)  ( (A) >= 0 ? 1: -1 )#define	AUTO_N_MANCHINELOCK				1046#define	AUTO_MANCHINELOCK					63488#define BTN_NOW_USE		0xFC00#define BTN_NOW_NO_USE		0x0010/*============================================================================+|           Global variable                                                  	|+============================================================================*/char*	SwitchStr[] =			{	"ROBOT_BTN_CYCLE_CLOSE",	//關				"ROBOT_BTN_CYCLE_OPEN",	//開	NULL}; char*	IOSwitchStr[] =			{	"ROBOT_LETTER_I",	//關				"ROBOT_LETTER_O",	//開	NULL}; char*	IOStatusImage[] =					//Point_1圖片路徑{	"res_tm640/unselected1.bmp",				"res_tm640/selected1.bmp",						NULL}; char*	RunModeStr[] =			{	"ROBOT_STR_RUN_CONTINUE",		//連續				"ROBOT_STR_RUN_SINGLESTEP",	//單步	NULL}; char*	Max_Axis_SpeedId[] =			{	"SERVO_PARAM13",	"SERVO_PARAM14",	"SERVO_PARAM15",	"SERVO_PARAM16",	"SERVO_PARAM17",	"SERVO_PARAM18",	NULL};  /*char*	ServoSwitchStatusPic[] =			{	"res_tm640/ServoOff.png",	// 狀態Off		"res_tm640/ServoOffDown.png",	// 當狀態Off要更換成On，按鈕按下的效果		"res_tm640/ServoOn.png",	// 狀態On				"res_tm640/ServoOnDown.png",	// 當狀態On要更換成Off，按鈕按下的效果		//"res_tm640/S_Off1.png",	// 狀態Off		//"res_tm640/S_Off1D.png",	// 當狀態Off要更換成On，按鈕按下的效果		//"res_tm640/S_On1.png",	// 狀態On				//"res_tm640/S_On1D.png",	// 當狀態On要更換成Off，按鈕按下的效果			//"res_tm640/S_Off2.png",	// 狀態Off		//"res_tm640/S_Off2D.png",	// 當狀態Off要更換成On，按鈕按下的效果		//"res_tm640/S_On2.png",	// 狀態On				//"res_tm640/S_On2D.png",	// 當狀態On要更換成Off，按鈕按下的效果				//"res_tm640/S_Off3.png",	// 狀態Off		//"res_tm640/S_Off3D.png",	// 當狀態Off要更換成On，按鈕按下的效果		//"res_tm640/S_On3.png",	// 狀態On				//"res_tm640/S_On3D.png",	// 當狀態On要更換成Off，按鈕按下的效果			NULL}; */CtmWnd*		u_pwndLTextMemoProg				= NULL;CtmWnd*		u_pwndBtnRunModeShow		= NULL;CtmWnd*		u_pwndStaticSpeedShow			= NULL;CtmWnd*		u_pwndBtnPlus							= NULL;CtmWnd*		u_pwndBtnMinus						= NULL;CtmWnd*		u_pwndEditTable[256]			= {NULL};CtmWnd*		u_pwndLimitFlag[6]					= {NULL};CtmWnd*		u_pwndLimitMask[6]					= {NULL};CtmWnd*		u_pwndStaticUnut[256]			= {NULL};CtmWnd*		u_pwndStaticCoord[7]			= {NULL};//時間元件-----------CtmWnd*		u_pwndeditCYCLE_TIME_Hour			= NULL;CtmWnd*		u_pwndeditCYCLE_TIME_Minut		= NULL;CtmWnd*		u_pwndeditCYCLE_TIME_Second		= NULL;//檔案名稱-----------CtmWnd*		u_pwndStaticFileName	= NULL;//速度元件CtmWnd*		u_pwndProgressBarLenSpeed	= NULL;CtmWnd*		u_pwndStaticLenSpeed	= NULL;CtmWnd*		u_pwndProgressBarAxisSpeed[6]	= {NULL};CtmWnd*		u_pwndStaticBarAxisSpeed[6]	= {NULL};//IO元件CtmWnd*		u_pwndBtnIOSwitch[5]	= {NULL};CtmWnd*		u_pwndEditIONum[5]	= {NULL};CtmWnd*		u_pwndImageIOStatus[5]	= {NULL};int		u_nEditTableCnt				=0;int		u_nLimitFlagCnt				=0;int		u_nLimitMaskCnt				=0;int		u_nStaticUnitCnt				=0;int		u_nStaticCoordCnt		=0;int		u_nProgressBarAxisSpeedCnt =0;int		u_nStaticAxisSpeedCnt = 0;int		u_nBtnIOSwitchCnt =0;int		u_nEditIONumCnt =0;int		u_nImageIOStatusCnt =0;int		u_lSpeed							=0;		//機械手臂目前運行的速度int		u_nRunModeType				=0;		//執行方式	BOOL	u_bEnterKey						= FALSE;		//判斷是否有按下Enter鍵WORD	u_wDBvalueJ_StartNo		=0;		//控制參數(關節座標)的起始編號WORD	u_wDBvalueC_StartNo		=0;		//控制參數(卡氏座標)的起始編號char	u_szMem_Part_File[64]	= "\0";		//目前執行中的檔案路徑//add		by		Marioint			Unitindex							=0;		//表示目前單位(0=公制,1=英制)，預設0	//20140915↑CtmWnd*		u_pwndEditTablePosture				=NULL;//20140922↑BOOL			CYCLE								=FALSE;	//FALSE=關 TRUE=開//20140930CtmWnd*		u_pwndBtnCycleShow		= NULL;//20141007//Mario add 2015/3/9 上午 09:00:32CtmWnd*		u_pwndBtnOptionStop					= NULL;CtmWnd*		u_pwndBtnBlkSkip						= NULL;CtmWnd*		u_pwndBtnMachineLock				= NULL;CtmWnd*		u_pwndEditStartBlkNo				= NULL;CtmWnd*		u_pwndBtnCoordinateMode			= NULL;//Mario add 2015/3/9 上午 11:27:10char 	old_filename[INT_FN_LEN] = "\0";int 	old_RunLine = -1;int 	CoordinateShowMode  = 0;		//0=C  1=Jchar   static_Statud = 0;int   IO_Select = 0;int   IO_Num[5]={1,1,1,1,1};char  IO_staus[5]={-1,-1,-1,-1,-1};//2015/6/16 上午 11:43:46/*============================================================================+|              Function	                                                     	|+============================================================================*/BOOL		OnCreateA(CtmWnd* pwndSender){	memset(g_Now_FileName, 0, sizeof(g_Now_FileName));		//抓取各元件的指針	u_pwndLTextMemoProg				= pwndSender->FindControlFromName("LTextMemoProg");	u_pwndBtnRunModeShow			= pwndSender->FindControlFromName("BtnRunModeShow");	u_pwndStaticSpeedShow			= pwndSender->FindControlFromName("StaticSpeedShow");	u_pwndBtnPlus							= pwndSender->FindControlFromName("btnPlus");	u_pwndBtnMinus						= pwndSender->FindControlFromName("btnMinus");	u_pwndBtnCycleShow				= pwndSender->FindControlFromName("BtnCycleShow");	u_pwndBtnCoordinateMode		= pwndSender->FindControlFromName("BtnCoordinateMode");	//u_pwndStaticCoordinate		= pwndSender->FindControlFromName("StaticCoordinateCartesian");		u_nStaticCoordCnt		= GetSpecialControlNum(pwndSender, "StaticCoord", "CtmStaticX2", u_pwndStaticCoord);			u_nEditTableCnt		= GetSpecialControlNum(pwndSender, "EditTABLE", "CtmEditX1", u_pwndEditTable);	u_nLimitFlagCnt		= GetSpecialControlNum(pwndSender, "LimitFlag", "CtmImageBox", u_pwndLimitFlag);	u_nLimitMaskCnt		= GetSpecialControlNum(pwndSender, "LimitMask", "CtmStaticX2", u_pwndLimitMask);	u_nStaticUnitCnt		= GetSpecialControlNum(pwndSender, "StaticUnit", "CtmStaticX2", u_pwndStaticUnut);		//控制參數列表完成後，"SERVO_PARAM0"->儲存機械手臂當前座標值的控制參數(關節座標)	u_wDBvalueJ_StartNo		= g_pDatabase->GetIndex(ANGULAR_COORD_ID);	//控制參數列表完成後，"TUNE_PARAM0"->儲存機械手臂當前座標值的控制參數(卡氏座標)	u_wDBvalueC_StartNo		= g_pDatabase->GetIndex(ABSOLUTE_COORD_ID);		u_pwndEditTablePosture = pwndSender->FindControlFromName("NowPostureTABLE");		//時間設定元件                        	u_pwndeditCYCLE_TIME_Hour			= pwndSender->FindControlFromName("EditCycleTimeH");	u_pwndeditCYCLE_TIME_Minut		= pwndSender->FindControlFromName("EditCycleTimeM");	u_pwndeditCYCLE_TIME_Second		= pwndSender->FindControlFromName("EditCycleTimeS");	u_pwndBtnOptionStop = pwndSender->FindControlFromName("Btnoption");	u_pwndBtnBlkSkip = pwndSender->FindControlFromName("Btnblkskip");	u_pwndBtnMachineLock = pwndSender->FindControlFromName("BtnMachineLock");	u_pwndEditStartBlkNo = pwndSender->FindControlFromName("EditStartBlkNo");		u_pwndStaticFileName = pwndSender->FindControlFromName("StaticFileName");			u_pwndProgressBarLenSpeed = pwndSender->FindControlFromName("ProgressBarLenSpeed");	u_pwndStaticLenSpeed 			= pwndSender->FindControlFromName("StaticShowLineSpeed");	u_nProgressBarAxisSpeedCnt		= GetSpecialControlNum(pwndSender, "ProgressBarAxis", "CtmProgressBar", u_pwndProgressBarAxisSpeed);	u_nStaticAxisSpeedCnt		= GetSpecialControlNum(pwndSender, "StaticShowAxisSpeed", "CtmStaticX2", u_pwndStaticBarAxisSpeed);	SetProgressSpeed(0,pwndSender);		u_nBtnIOSwitchCnt		= GetSpecialControlNum(pwndSender, "btnIOSwitch", "CtmToolButton", u_pwndBtnIOSwitch);	u_nEditIONumCnt		= GetSpecialControlNum(pwndSender, "editIONum", "CtmEditX1", u_pwndEditIONum);	u_nImageIOStatusCnt		= GetSpecialControlNum(pwndSender, "imageIOStatus", "CtmImageBox", u_pwndImageIOStatus);    	//讀取目前單位型態 20140915 by Mario		Unitindex					= GetDBValue("TUNE_PARAM37").lValue;	//設定單位			ShowCurrentCoordinate();		RobotStatus = OP_MEMORY_MODE;		SetUnit();		((CtmMTextMemo*)u_pwndLTextMemoProg)->OnLoseFocus(); 				return	TRUE;}WORD		OnKeyA(CtmWnd* pwndSender, WORD wKey){		if(wKey == _ENTER)		u_bEnterKey = TRUE;	else		u_bEnterKey = FALSE;		((CtmFormView*)pwndSender)->OnKey1(wKey);		return wKey;	}WORD		OnChangeA(CtmWnd* pwndSender, WORD wIDControl){	CtmWnd*		pwndTemp = NULL;	pwndTemp	= pwndSender->FindControlFromTab(wIDControl);	if(u_bEnterKey)	{		if(pwndTemp== u_pwndEditStartBlkNo)		{			int startLine = 0;			u_pwndEditStartBlkNo->GetPropValueT("value",&startLine, sizeof(startLine));			if(startLine >0)				SetDBValue("CNC_START_BLK_NO",startLine-1);			else			{				u_pwndEditStartBlkNo->SetPropValueT("value",GetDBValue("CNC_START_BLK_NO").lValue+1);				u_pwndEditStartBlkNo->Update();			}		}		else		{			for(int EditNum = 0 ; EditNum < u_nEditIONumCnt ; EditNum++)			{				if(u_pwndEditIONum[EditNum] == pwndTemp)				{					u_pwndEditIONum[EditNum]->GetPropValueT("value",&(IO_Num[EditNum]), sizeof(IO_Num[EditNum]));					if(IO_Num[EditNum]<1 || IO_Num[EditNum] > 32)					{ 						IO_Num[EditNum]=1;						u_pwndEditIONum[EditNum]->SetPropValueT("value",IO_Num[EditNum]);						u_pwndEditIONum[EditNum]->Update();					}					//printf("IO_Num[%d] = %d\n",EditNum,IO_Num[EditNum]);				}			}			}	}	return	wIDControl;}WORD		OnMouseUp(CtmWnd* pwndSender, WORD wIDControl){	CtmWnd*		pwndTemp = NULL;	pwndTemp	= pwndSender->FindControlFromTab(wIDControl);	if(wIDControl == 4)	{		char temp;		if(g_TxCNCData.shmCNCData.CNC_cycle_status == 0)			temp = 1;		else 			temp = 0;		g_ptaskCNC->WriteValue((long)&g_TxCNCData.shmCNCData.CNC_cycle_status,&temp,sizeof(g_TxCNCData.shmCNCData.CNC_cycle_status));		WORD ans = SetDBString("CNC_CYCLE_STATUS",&temp,1);		u_pwndBtnCycleShow->SetPropValueT("captionID",SwitchStr[(int)temp]);				u_pwndBtnCycleShow->CreateA();		u_pwndBtnCycleShow->Update();	}	else if(wIDControl == 3)		//3 =  u_pwndBtnRunModeShow	{		char temp;		if(g_TxCNCData.shmCNCData.CNC_single_block == 0)			temp = 1;		else			temp = 0;		g_ptaskCNC->WriteValue((long)&g_TxCNCData.shmCNCData.CNC_single_block,&temp,sizeof(g_TxCNCData.shmCNCData.CNC_single_block));		//printf("temp is %d\n",temp);		WORD ans = SetDBString("CNC_SINGLE_BLOCK",&temp,1);		u_pwndBtnRunModeShow->SetPropValueT("captionID",RunModeStr[(int)temp]);				u_pwndBtnRunModeShow->CreateA();		u_pwndBtnRunModeShow->Update();			}	else if(pwndTemp == u_pwndBtnPlus)		//Speed↑	{		SetAndShowSpeed(SPEED_PLUS);	}	else if(pwndTemp == u_pwndBtnMinus)		//Speed↓	{		SetAndShowSpeed(SPEED_MINUS);	}	else if(pwndTemp == u_pwndBtnOptionStop)	{		char temp;		if(g_TxCNCData.shmCNCData.CNC_option_stop == 0)			temp = 1;		else			temp = 0;		g_ptaskCNC->WriteValue((long)&g_TxCNCData.shmCNCData.CNC_option_stop,&temp,sizeof(g_TxCNCData.shmCNCData.CNC_option_stop));		WORD ans = SetDBString("CNC_OPTION_STOP",&temp,1);		u_pwndBtnOptionStop->SetPropValueT("captionID",SwitchStr[(int)temp]);				u_pwndBtnOptionStop->CreateA();		u_pwndBtnOptionStop->Update();	}	else if(pwndTemp == u_pwndBtnBlkSkip)	{		char temp;		if(g_TxCNCData.shmCNCData.CNC_block_skip == 0)			temp = 1;		else			temp = 0;		g_ptaskCNC->WriteValue((long)&g_TxCNCData.shmCNCData.CNC_block_skip,&temp,sizeof(g_TxCNCData.shmCNCData.CNC_block_skip));		WORD ans = SetDBString("CNC_READ_BLOCK_SKIP_FLAG",&temp,1);		u_pwndBtnBlkSkip->SetPropValueT("captionID",SwitchStr[(int)temp]);				u_pwndBtnBlkSkip->CreateA();		u_pwndBtnBlkSkip->Update();	}	else if(pwndTemp == u_pwndBtnMachineLock)	{		if(g_TxCNCData.shmCNCData.CNC_auto_status == RUN_STATUS_STOP)		{			char temp;			if(g_TxCNCData.shmCNCData.CNC_machine_lock == 0)			{				temp = 1;				u_pwndBtnMachineLock->SetPropValueT("bgc",AUTO_MANCHINELOCK);			}			else 			{				u_pwndBtnMachineLock->SetPropValueT("bgc",AUTO_N_MANCHINELOCK);				MsgBoxConfirm(g_MultiLanguage[g_MultiLanguage.GetStrKeyIndex("ROBOT_STR_MACHLOCK_OFF")],tmFT_CODE_TECH);				//((CtmFormView*)pwndSender)->OnLoseFocus();						temp = 0;			}			g_ptaskCNC->WriteValue((long)&g_TxCNCData.shmCNCData.CNC_machine_lock,&temp,sizeof(g_TxCNCData.shmCNCData.CNC_machine_lock));			u_pwndBtnMachineLock->SetPropValueT("captionID",SwitchStr[(int)temp]);						u_pwndBtnMachineLock->CreateA();			u_pwndBtnMachineLock->Update();		}		else		{			MsgBoxConfirm(g_MultiLanguage[g_MultiLanguage.GetStrKeyIndex("ROBOT_STR_ALRAM_AUTOING")],tmFT_CODE_TECH);			//((CtmFormView*)pwndSender)->OnLoseFocus();				}	}	else if(pwndTemp == u_pwndBtnCoordinateMode)	{		//EtherNet_WriteValue(110 ,0 ,1 ,(void*)NULL);		CoordinateShowMode +=1;		if(CoordinateShowMode > 1) CoordinateShowMode = 0;	}	else	{		for(int BtnNum = 0 ; BtnNum < u_nBtnIOSwitchCnt ; BtnNum++)		{			if(u_pwndBtnIOSwitch[BtnNum] == pwndTemp)			{				if(IO_Select & 0x1<<BtnNum)				{					IO_Select -= (0x1<<BtnNum);					u_pwndBtnIOSwitch[BtnNum]->SetPropValueT("captionID",IOSwitchStr[0]);				}				else				{					IO_Select |= (0x1<<BtnNum);					u_pwndBtnIOSwitch[BtnNum]->SetPropValueT("captionID",IOSwitchStr[1]);				}				u_pwndBtnIOSwitch[BtnNum]->CreateA();				u_pwndBtnIOSwitch[BtnNum]->Update();				//printf("IO_Select = %02x\n",IO_Select);			}		}		}	return wIDControl;}void		OnUpdateA(CtmWnd* pwndSender){	static BOOL		RunFrist = TRUE;	if(RunFrist)	{ 		static_Statud = g_TxCNCData.shmCNCData.CNC_auto_status;		((CtmFormView*)pwndSender)->OnLoseFocus();				RunFrist = FALSE;			if(g_TxCNCData.shmCNCData.CNC_auto_status == RUN_STATUS_STOP)		{			strcpy(old_filename,g_TxCNCData.shmCNCData.CNC_mem_part);			old_RunLine = 0;		}		else if(g_TxCNCData.shmCNCData.CNC_auto_status == RUN_STATUS_RUN)		{			strcpy(old_filename,g_pRxCNCData->CNC_curr_blk.modal.fn);				old_RunLine = g_pRxCNCData->CNC_curr_blk.modal.bn;		}		else if(g_TxCNCData.shmCNCData.CNC_auto_status == RUN_STATUS_PAUSE)		{			strcpy(old_filename,g_pRxCNCData->CNC_curr_blk.modal.fn);				old_RunLine = g_pRxCNCData->CNC_curr_blk.modal.bn;		}		sprintf(u_szMem_Part_File, "%s/%s", g_szProgDirectory, old_filename);		UpdateFileName(old_filename);		((CtmMTextMemo*)u_pwndLTextMemoProg)->LoadFromFile(u_szMem_Part_File, 0,TRUE);		((CtmMTextMemo*)u_pwndLTextMemoProg)->SetSelectWithFileLine(old_RunLine+1 ,1046 ,10);		((CtmMTextMemo*)u_pwndLTextMemoProg)->Update();		((CtmMTextMemo*)u_pwndLTextMemoProg)->OnLoseFocus(); 			ReturnSet(pwndSender);	}			SetProgressSpeed(1,pwndSender);	UpdateRunAndCycleTime();		//printf("g_pRxCNCData->CNC_dis_to_go %d  %d  %d  %d  %d  %d\n ",g_pRxCNCData->CNC_dis_to_go.x,g_pRxCNCData->CNC_dis_to_go.y,g_pRxCNCData->CNC_dis_to_go.z,g_pRxCNCData->CNC_dis_to_go.a,g_pRxCNCData->CNC_dis_to_go.b,g_pRxCNCData->CNC_dis_to_go.c);	if( g_pRxCNCData->CNC_curr_blk.modal.fn[0] != 0  && (strcmp(old_filename,g_pRxCNCData->CNC_curr_blk.modal.fn) != 0) && g_TxCNCData.shmCNCData.CNC_auto_status != RUN_STATUS_STOP)	{		strcpy(old_filename,g_pRxCNCData->CNC_curr_blk.modal.fn);		sprintf(u_szMem_Part_File, "%s/%s", g_szProgDirectory, old_filename);		UpdateFileName(old_filename);		((CtmMTextMemo*)u_pwndLTextMemoProg)->LoadFromFile(u_szMem_Part_File, 0,TRUE);		((CtmMTextMemo*)u_pwndLTextMemoProg)->OnLoseFocus(); 		}	else if(strcmp(old_filename,g_TxCNCData.shmCNCData.CNC_mem_part) != 0 && g_TxCNCData.shmCNCData.CNC_auto_status == RUN_STATUS_STOP && g_pRxCNCData->CNC_status==M_READY)	{		strcpy(old_filename,g_TxCNCData.shmCNCData.CNC_mem_part);		sprintf(u_szMem_Part_File, "%s/%s", g_szProgDirectory, old_filename);		UpdateFileName(old_filename);		((CtmMTextMemo*)u_pwndLTextMemoProg)->LoadFromFile(u_szMem_Part_File, 0,TRUE);		((CtmMTextMemo*)u_pwndLTextMemoProg)->OnLoseFocus(); 		}		if(old_RunLine != g_pRxCNCData->CNC_curr_blk.modal.bn&& g_TxCNCData.shmCNCData.CNC_auto_status != RUN_STATUS_STOP)	{		if(g_pRxCNCData->CNC_curr_blk.modal.bn!=-1)		{			old_RunLine = g_pRxCNCData->CNC_curr_blk.modal.bn;			//printf("111old_RunLine = %d\n",old_RunLine);			((CtmMTextMemo*)u_pwndLTextMemoProg)->SetSelectWithFileLine(old_RunLine+1 ,1046 ,10)	;		}	}	else if(g_TxCNCData.shmCNCData.CNC_auto_status == RUN_STATUS_STOP && old_RunLine != GetDBValue("CNC_START_BLK_NO").lValue+1)	{		old_RunLine = GetDBValue("CNC_START_BLK_NO").lValue+1;		//printf("222old_RunLine = %d\n",old_RunLine);		((CtmMTextMemo*)u_pwndLTextMemoProg)->SetSelectWithFileLine(old_RunLine ,1046 ,10)	;	}	//printf("g_TxCNCData.shmCNCData.CNC_auto_status = %d\n",g_TxCNCData.shmCNCData.CNC_auto_status);	//printf("g_pTxCNCData->CNC_auto_status = %d\n",g_pTxCNCData->CNC_auto_status);	if(g_TxCNCData.shmCNCData.CNC_auto_status != static_Statud)	{		static_Statud = g_TxCNCData.shmCNCData.CNC_auto_status;	}	ShowCurrentCoordinate();	UpdateIOStatus();}void		OnMessage(CtmWnd* pwndSender, int message, WPARAM wParam, LPARAM lParam){	if(message==MSG_SH_APP_TOOLBAR_ONKEY)	{		if(wParam == _F7)			{				if(g_TxCNCData.shmCNCData.CNC_auto_status==RUN_STATUS_STOP)			{				MsgBoxCall("msgboxFile2.txt");				if(g_Now_FileName[0] != '\0')					ChangeFile();						}			else				MsgBoxConfirm(g_MultiLanguage["ROBOT_STR_ALRAM_AUTOING"], tmFT_CODE_TECH);			memset(g_Now_FileName,0,sizeof(g_Now_FileName));			Now_Push_Btn->CreateA();						Now_Push_Btn->UpdateAll();					Now_Push_Btn->Update();						}		/*else if(wParam == _F10)			{				Now_Push_Btn->CreateA();						Now_Push_Btn->UpdateAll();					Now_Push_Btn->Update();						}*/	}	else if(message==MSG_PANEL_KEY)	{		char keycode;		keycode = wParam;		if(keycode>0x80)		{			keycode = keycode-0x80;			if(keycode== 0x40) 			{				//printf("Servo\n");				if(g_TxCNCData.shmCNCData.CNC_auto_status != RUN_STATUS_STOP)				{					MsgBoxConfirm(g_MultiLanguage[g_MultiLanguage.GetStrKeyIndex("ROBOT_STR_ALRAM_AUTOING")],tmFT_CODE_TECH);				}				else if(g_TxCNCData.shmCNCData.CNC_mode_lgt != OP_MEMORY_MODE)				{					MsgBoxConfirm(g_MultiLanguage[g_MultiLanguage.GetStrKeyIndex("ROBOT_ALARM_OPER003")],tmFT_CODE_TECH);				}				else				{							char temp;					if(g_TxCNCData.shmCNCData.CNC_servo_on == 1) // On turn Off						temp = 0;					else if(g_TxCNCData.shmCNCData.CNC_servo_on == 0) // Off turn On						temp = 1;					g_ptaskCNC->WriteValue((long)&g_TxCNCData.shmCNCData.CNC_servo_on,&temp,sizeof(g_TxCNCData.shmCNCData.CNC_servo_on));						}			}			else if(keycode== 0x11)			{				//printf("start\n");				if(g_TxCNCData.shmCNCData.CNC_mode_lgt == OP_MEMORY_MODE)				{					char temp = RUN_STATUS_RUN;					g_ptaskCNC->WriteValue((long)&g_TxCNCData.shmCNCData.CNC_auto_status,&temp,sizeof(g_TxCNCData.shmCNCData.CNC_auto_status));					static_Statud = g_TxCNCData.shmCNCData.CNC_auto_status;				}			}			else if(keycode== 0x01)			{ 				//printf("pause\n");				if(g_TxCNCData.shmCNCData.CNC_mode_lgt == OP_MEMORY_MODE && g_TxCNCData.shmCNCData.CNC_auto_status==RUN_STATUS_RUN)				{					char temp = RUN_STATUS_PAUSE;					g_ptaskCNC->WriteValue((long)&g_TxCNCData.shmCNCData.CNC_auto_status,&temp,sizeof(g_TxCNCData.shmCNCData.CNC_auto_status));					static_Statud = g_TxCNCData.shmCNCData.CNC_auto_status;				} 				else if(g_TxCNCData.shmCNCData.CNC_mode_lgt == OP_MEMORY_MODE && g_TxCNCData.shmCNCData.CNC_auto_status==RUN_STATUS_PAUSE)				{					MsgBoxCall("msgboxFourStatic.txt",2,"ROBOT_STR_STOP_PROG_INFO1","ROBOT_STR_STOP_PROG_INFO2");					if(g_bMsgBoxFlag)		//提示小視窗判斷 Yes or No					{						char temp = RUN_STATUS_STOP;						g_ptaskCNC->WriteValue((long)&g_TxCNCData.shmCNCData.CNC_auto_status,&temp,sizeof(g_TxCNCData.shmCNCData.CNC_auto_status));						static_Statud = g_TxCNCData.shmCNCData.CNC_auto_status;						g_bMsgBoxFlag = FALSE;					}				}			}		}	}	else if(message == MSG_SH_APP_CNC_RESET_FLAG)	{		strcpy(old_filename,g_TxCNCData.shmCNCData.CNC_mem_part);		old_RunLine = 0;	}}/*============================================================================+|              Helper		                                                   		|+============================================================================*/void		ShowProgram(int nProgramStartNo)		//顯示檔案內容，nProgramStartNo為印出的起始行(檔案裡){			if(u_pwndLTextMemoProg != NULL)	{		//統整檔案路徑		sprintf(u_szMem_Part_File, "%s/%s", g_szProgDirectory, g_TxCNCData.shmCNCData.CNC_mem_part);				UpdateFileName(g_TxCNCData.shmCNCData.CNC_mem_part);		((CtmMTextMemo*)u_pwndLTextMemoProg)->LoadFromFile(u_szMem_Part_File, nProgramStartNo,TRUE);		((CtmMTextMemo*)u_pwndLTextMemoProg)->GotoLine(nProgramStartNo);		((CtmMTextMemo*)u_pwndLTextMemoProg)->Update();		((CtmMTextMemo*)u_pwndLTextMemoProg)->OnLoseFocus(); 		}		}void		ShowCurrentCoordinate()		//顯示機械手臂目前的座標位置{	static int old_CoordinateShowMode = 0;	if(CoordinateShowMode != old_CoordinateShowMode)	{		old_CoordinateShowMode = CoordinateShowMode;		SetUnit();		if(old_CoordinateShowMode == 0)		{			for(int i =0; i<u_nLimitMaskCnt ; i++)				u_pwndLimitMask[i]->Update();		}	}	if(old_CoordinateShowMode == 0)	{		for(int i =0; i<u_nEditTableCnt; i++)		//卡氏座標(Cartesian)		{			if(u_pwndEditTable[i] != NULL)			{ 				//取得控制參數的資料ID					      if(i < cfg.cn)	     	{	      	char*	pDataID 	= NULL;		      pDataID 	= g_pDatabase->GetString(u_wDBvalueC_StartNo+i);		      double	lDBvalue	=0;																								      lDBvalue	= GetDBValue(pDataID).lValue;		      if(i < 3)																									    		      {																																							lDBvalue	=	lDBvalue*(!Unitindex) + lDBvalue*Unitindex/g_Metric_Imperial_Unit*10;							lDBvalue += 0.5*SIGN(lDBvalue);																														u_pwndEditTable[i]->SetPropValueT("precision",3+Unitindex);								}							      u_pwndEditTable[i]->SetPropValueT("value", lDBvalue);		    }		    else		    {		      if(i < 3)																							u_pwndEditTable[i]->SetPropValueT("precision",3+Unitindex);			      u_pwndEditTable[i]->SetPropValueT("value", 0.0);				    }	      u_pwndEditTable[i]->Update();			}		}	}	else if(old_CoordinateShowMode == 1)	{		for(int i =0; i<u_nEditTableCnt; i++)		//卡氏座標(Cartesian)		{			if(u_pwndEditTable[i] != NULL)			{				//取得控制參數的資料ID	      if(i < cfg.jn)	     	{		      char*	pDataID 	= NULL;		      pDataID 	= g_pDatabase->GetString(u_wDBvalueJ_StartNo+i);														      int	lDBvalue	=0;																							      lDBvalue	= GetDBValue(pDataID).lValue;					u_pwndEditTable[i]->SetPropValueT("precision",3);			      u_pwndEditTable[i]->SetPropValueT("value", lDBvalue);	      	SetLimitFlag(i,lDBvalue);		    }		    else		   	{					u_pwndEditTable[i]->SetPropValueT("precision",3);			      u_pwndEditTable[i]->SetPropValueT("value", 0.0);	      	SetLimitFlag(i,0.0);		    }		     u_pwndEditTable[i]->Update();			}		}	}}void	SetLimitFlag(int Axis,int Value){	int edit_left=0,edit_right=0,edit_Len=0;	int	Limit_Plus=0,LiMit_Minus=0,LiMit_Range=0,Now_Pos=0;	u_pwndEditTable[Axis]->GetPropValueT("left",&edit_left,sizeof(edit_left));	u_pwndEditTable[Axis]->GetPropValueT("right",&edit_right,sizeof(edit_right));	edit_Len = edit_right-edit_left-2;	Limit_Plus = g_TxCNCData.shmCNCData.PARAM.tune_param[41+Axis*2];	LiMit_Minus = g_TxCNCData.shmCNCData.PARAM.tune_param[42+Axis*2];	LiMit_Range = Limit_Plus - LiMit_Minus;	if(LiMit_Range==0) return;	if(LiMit_Range < 0) LiMit_Range+=360000;	Now_Pos = Value-LiMit_Minus;	if(Now_Pos < 0) Now_Pos+=360000;	int offset=0;	offset=edit_Len*Now_Pos/LiMit_Range;	if(offset > edit_Len) offset=edit_Len/2;	u_pwndLimitFlag[Axis]->Clear();	u_pwndLimitFlag[Axis]->SetPropValueT("left",edit_left+offset-1);	u_pwndLimitFlag[Axis]->SetPropValueT("right",edit_left+offset+5);	u_pwndLimitFlag[Axis]->Update();	//printf("Axis is %d\nLeft is %d ,right is %d\nLimit is %d add to %d\n",Axis+1,edit_left,edit_right,LiMit_Minus,Limit_Plus);}void		SetAndShowSpeed(int nType)		//設定機械手臂的移動速度{	if(u_pwndStaticSpeedShow != NULL)	{		char	temp[15] 		= "\0";		char	szTemp[15]		= "\0";		memset(temp, 0, sizeof(temp));		memset(szTemp, 0, sizeof(szTemp));				//控制參數列表完成後，"MAKER_PARAM1"->移動速度的控制參數(機械手臂)		u_lSpeed = GetDBValue("CNC_FEED_OVER_CMD").lValue;				//nType等於SPEED_INITIAL時u_lSpeed不須處理		if(nType == SPEED_PLUS)		//+		{			u_lSpeed+=10;			if(u_lSpeed>100)		//MAX =100%			{				u_lSpeed = 100;				return;			}		}		else if(nType == SPEED_MINUS)		//-		{			u_lSpeed-=10;			if((u_lSpeed<0)||(u_lSpeed>100))		//MIN =0%			{				u_lSpeed =0;				return;			}		}		//控制參數列表完成後，"MAKER_PARAM1"->移動速度的控制參數(機械手臂)		SetDBValue("CNC_FEED_OVER_CMD", u_lSpeed);		//g_TxCNCData.shmCNCData.CNC_feed_over_cmd = u_lSpeed;		sprintf(temp, "%d%s", u_lSpeed, "%");		CodeChange(szTemp, temp);		u_pwndStaticSpeedShow->SetPropValueT("text", szTemp);		u_pwndStaticSpeedShow->Update();	}}void    CodeChange(char *pDst, char *pSrc)		//輔助用函式，單字節轉化為雙字節處理{	//供StaticX2元件的text屬性使用(目前)	WORD	*pwDst = (WORD *)pDst;      while(*pSrc != 0)        	*pwDst++ = *pSrc++;      *pwDst =0;  }void		ChangeFile()		//2015/3/9 下午 03:46:27	by Mario  更新工作檔案{	if(g_ptaskCNC != NULL)	{		Prompt(g_MultiLanguage[g_MultiLanguage.GetStrKeyIndex("ROBOT_MSG_FILE_LOADING")], 0);		if(g_ptaskCNC->ReadOperationFile(g_Now_FileName, FALSE, TRUE))		{ 			//檔案管理 			ShowProgram(0);			u_pwndEditStartBlkNo->SetPropValueT("value",GetDBValue("CNC_START_BLK_NO").lValue+1);			u_pwndEditStartBlkNo->Update(); 		} 		//清空提示訊息 		Prompt(g_MultiLanguage[g_MultiLanguage.GetStrKeyIndex("ROBOT_STR_DUMMY")], 0);	}}void	inidefine()			//設定回復預設{	char temp;	temp =0;	//printf("g_TxCNCData.shmCNCData.CNC_cycle_status is %c\n",g_TxCNCData.shmCNCData.CNC_cycle_status);	g_ptaskCNC->WriteValue((long)&g_TxCNCData.shmCNCData.CNC_cycle_status,&temp,sizeof(g_TxCNCData.shmCNCData.CNC_cycle_status));	SetDBString("CNC_CYCLE_STATUS",&temp,1);		g_ptaskCNC->WriteValue((long)&g_TxCNCData.shmCNCData.CNC_single_block,&temp,sizeof(g_TxCNCData.shmCNCData.CNC_single_block));	SetDBString("CNC_SINGLE_BLOCK",&temp,1);		g_ptaskCNC->WriteValue((long)&g_TxCNCData.shmCNCData.CNC_option_stop,&temp,sizeof(g_TxCNCData.shmCNCData.CNC_option_stop));	SetDBString("CNC_OPTION_STOP",&temp,1);		g_ptaskCNC->WriteValue((long)&g_TxCNCData.shmCNCData.CNC_block_skip,&temp,sizeof(g_TxCNCData.shmCNCData.CNC_block_skip));	SetDBString("CNC_READ_BLOCK_SKIP_FLAG",&temp,1);			g_ptaskCNC->WriteValue((long)&g_TxCNCData.shmCNCData.CNC_machine_lock,&temp,sizeof(g_TxCNCData.shmCNCData.CNC_machine_lock));}void		ReturnSet(CtmWnd* pwndSender)		//回復設定{/*-------------速度初始化----------*/	SetAndShowSpeed(0);/*--------------循環/不循環---------------*/	char temp;	temp = g_TxCNCData.shmCNCData.CNC_cycle_status;	u_pwndBtnCycleShow->SetPropValueT("captionID",SwitchStr[(int)temp]);		u_pwndBtnCycleShow->CreateA();	u_pwndBtnCycleShow->Update();/*--------------連續/單節---------------*/	temp = g_TxCNCData.shmCNCData.CNC_single_block;	u_pwndBtnRunModeShow->SetPropValueT("captionID",RunModeStr[(int)temp]);		u_pwndBtnRunModeShow->CreateA();	u_pwndBtnRunModeShow->Update();/*--------------Blk.skip---------------*/	temp = g_TxCNCData.shmCNCData.CNC_block_skip;	u_pwndBtnBlkSkip->SetPropValueT("captionID",SwitchStr[(int)temp]);		u_pwndBtnBlkSkip->CreateA();	u_pwndBtnBlkSkip->Update();/*--------------option Stop------------*/	temp = g_TxCNCData.shmCNCData.CNC_option_stop;	u_pwndBtnOptionStop->SetPropValueT("captionID",SwitchStr[(int)temp]);		u_pwndBtnOptionStop->CreateA();	u_pwndBtnOptionStop->Update();/*-----------------起始行數--------------*/	u_pwndEditStartBlkNo->SetPropValueT("value",GetDBValue("CNC_START_BLK_NO").lValue+1);	u_pwndEditStartBlkNo->Update();/*--------------------------------------------*/	temp = g_TxCNCData.shmCNCData.CNC_machine_lock;		u_pwndBtnMachineLock->SetPropValueT("captionID",SwitchStr[(int)temp]);	u_pwndBtnMachineLock->CreateA();	u_pwndBtnMachineLock->Update();		/*---------------------------------------*/}void		SetUnit()	//設定單位(mm or in)  20140915		by	Mario{	if(CoordinateShowMode == 0)	{		for (int i = 0 ;i < u_nStaticUnitCnt ; i++)		{			if(Unitindex == 0 )				u_pwndStaticUnut[i]->SetPropValueT("textID","ROBOT_UNIT_MM");			else if(Unitindex == 1)				u_pwndStaticUnut[i]->SetPropValueT("textID","ROBOT_UNIT_INCH");						u_pwndStaticUnut[i]->Update();		}		for(int i=0 ; i<cfg.cn ; i++)		{			u_pwndStaticCoord[i]->SetPropValueT("textID",cfg.c_sid[i]);			u_pwndStaticCoord[i]->Update();		}					u_pwndBtnCoordinateMode->SetPropValueT("captionID","ROBOT_STR_COORDINATE_CARTESIAN");		u_pwndBtnCoordinateMode->CreateA();		u_pwndBtnCoordinateMode->Update();	}	else	if(CoordinateShowMode == 1)	{		for (int i = 0 ;i < u_nStaticUnitCnt ; i++)		{			u_pwndStaticUnut[i]->SetPropValueT("textID","ROBOT_UNIT_DEG");			u_pwndStaticUnut[i]->Update();		}				for(int i=0 ; i<cfg.jn ; i++)		{			u_pwndStaticCoord[i]->SetPropValueT("textID",cfg.j_sid[i]);			u_pwndStaticCoord[i]->Update();		}				u_pwndBtnCoordinateMode->SetPropValueT("captionID","ROBOT_STR_COORDINATE_JOINT");		u_pwndBtnCoordinateMode->CreateA();		u_pwndBtnCoordinateMode->Update();	}}void	UpdateRunAndCycleTime(){	long  lCycleTime =g_pRxCNCData->CNC_cycle_time;//GetDBValue("CNC_CYCLE_TIME").lValue;	long	lCycleTimeSec = (long)((lCycleTime/1000) % 60);	long	lCycleTimeMin = (long)(lCycleTime/60000);	long	lCycleTimeHour= (long)(lCycleTimeMin/60);	lCycleTimeMin = (long)(lCycleTimeMin%60);	if(u_pwndeditCYCLE_TIME_Hour != NULL)		{		u_pwndeditCYCLE_TIME_Hour -> SetPropValueT("value", lCycleTimeHour);		u_pwndeditCYCLE_TIME_Hour -> Update();	}	if(u_pwndeditCYCLE_TIME_Minut != NULL)		{		u_pwndeditCYCLE_TIME_Minut -> SetPropValueT("value", lCycleTimeMin);		u_pwndeditCYCLE_TIME_Minut -> Update();	}	if(u_pwndeditCYCLE_TIME_Second != NULL)		{		u_pwndeditCYCLE_TIME_Second -> SetPropValueT("value", lCycleTimeSec);		u_pwndeditCYCLE_TIME_Second -> Update();	}}void  SetProgressSpeed(int Mode,CtmWnd* pwndSender){	char tmp[16];	char tmp1[32];	if(Mode==0) //ini	{		u_pwndProgressBarLenSpeed->SetPropValueT("max",GetDBValue("SERVO_PARAM19").lValue);		u_pwndProgressBarLenSpeed->SetPropValueT("min",(double)0);		u_pwndProgressBarLenSpeed->Update();			for(int i =0 ; i<u_nProgressBarAxisSpeedCnt;i++)		{			u_pwndProgressBarAxisSpeed[i]->SetPropValueT("max",GetDBValue(Max_Axis_SpeedId[i]).lValue);	  	u_pwndProgressBarAxisSpeed[i]->SetPropValueT("min",(double)0);	  	u_pwndProgressBarAxisSpeed[i]->Update();		}		                                    	}	else if(Mode==1) //Update	{		u_pwndProgressBarLenSpeed->SetPropValueT("value",g_pRxCNCData->CNC_part_count);		sprintf(tmp,"%3.1f mm/s\0",(double)g_pRxCNCData->CNC_part_count/1000);		memset(tmp1,0,sizeof(tmp1));		CodeChange(tmp1, tmp);		u_pwndStaticLenSpeed->SetPropValueT("text",tmp1);		u_pwndProgressBarLenSpeed->Update();		((CtmStaticX2*)u_pwndStaticLenSpeed)->Update2();				//long *temp=&(g_pRxCNCData->CNC_dis_to_go.x);				switch(cfg.jn)		{			case 6:		  u_pwndProgressBarAxisSpeed[5]->SetPropValueT("value",g_pRxCNCData->CNC_dis_to_go.c);			sprintf(tmp,"%3.1f deg/s\0",(double)g_pRxCNCData->CNC_dis_to_go.c/1000);			memset(tmp1,0,sizeof(tmp1));			CodeChange(tmp1, tmp);	  	u_pwndStaticBarAxisSpeed[5]->SetPropValueT("text",tmp1);		  u_pwndProgressBarAxisSpeed[5]->Update();	  	((CtmStaticX2*)u_pwndStaticBarAxisSpeed[5])->Update2();			case 5:		  u_pwndProgressBarAxisSpeed[4]->SetPropValueT("value",g_pRxCNCData->CNC_dis_to_go.b);			sprintf(tmp,"%3.1f deg/s\0",(double)g_pRxCNCData->CNC_dis_to_go.b/1000);			memset(tmp1,0,sizeof(tmp1));			CodeChange(tmp1, tmp);	  	u_pwndStaticBarAxisSpeed[4]->SetPropValueT("text",tmp1);		  u_pwndProgressBarAxisSpeed[4]->Update();	  	((CtmStaticX2*)u_pwndStaticBarAxisSpeed[4])->Update2();			case 4:		  u_pwndProgressBarAxisSpeed[3]->SetPropValueT("value",g_pRxCNCData->CNC_dis_to_go.a);			sprintf(tmp,"%3.1f deg/s\0",(double)g_pRxCNCData->CNC_dis_to_go.a/1000);			memset(tmp1,0,sizeof(tmp1));			CodeChange(tmp1, tmp);	  	u_pwndStaticBarAxisSpeed[3]->SetPropValueT("text",tmp1);		  u_pwndProgressBarAxisSpeed[3]->Update();	  	((CtmStaticX2*)u_pwndStaticBarAxisSpeed[3])->Update2();			case 3:		  u_pwndProgressBarAxisSpeed[2]->SetPropValueT("value",g_pRxCNCData->CNC_dis_to_go.z);			sprintf(tmp,"%3.1f deg/s\0",(double)g_pRxCNCData->CNC_dis_to_go.z/1000);			memset(tmp1,0,sizeof(tmp1));			CodeChange(tmp1, tmp);	  	u_pwndStaticBarAxisSpeed[2]->SetPropValueT("text",tmp1);		  u_pwndProgressBarAxisSpeed[2]->Update();	  	((CtmStaticX2*)u_pwndStaticBarAxisSpeed[2])->Update2();			case 2:		  u_pwndProgressBarAxisSpeed[1]->SetPropValueT("value",g_pRxCNCData->CNC_dis_to_go.y);			sprintf(tmp,"%3.1f deg/s\0",(double)g_pRxCNCData->CNC_dis_to_go.y/1000);			memset(tmp1,0,sizeof(tmp1));			CodeChange(tmp1, tmp);	  	u_pwndStaticBarAxisSpeed[1]->SetPropValueT("text",tmp1);		  u_pwndProgressBarAxisSpeed[1]->Update();	  	((CtmStaticX2*)u_pwndStaticBarAxisSpeed[1])->Update2();			case 1:		  u_pwndProgressBarAxisSpeed[0]->SetPropValueT("value",g_pRxCNCData->CNC_dis_to_go.x);			sprintf(tmp,"%3.1f deg/s\0",(double)g_pRxCNCData->CNC_dis_to_go.x/1000);			memset(tmp1,0,sizeof(tmp1));			CodeChange(tmp1, tmp);	  	u_pwndStaticBarAxisSpeed[0]->SetPropValueT("text",tmp1);		  u_pwndProgressBarAxisSpeed[0]->Update();	  	((CtmStaticX2*)u_pwndStaticBarAxisSpeed[0])->Update2();		  break;		}	}}void UpdateFileName(char *filename){	char	temp[15] 		= "\0";	char	szTemp[15]		= "\0";	memset(temp, 0, sizeof(temp));	memset(szTemp, 0, sizeof(szTemp));	sprintf(temp,"%s",filename);	//printf("temp = %s\n",temp);	CodeChange(szTemp, temp);	u_pwndStaticFileName->SetPropValueT("text",szTemp);		u_pwndStaticFileName->Update();}void		UpdateIOStatus(){	for(int i = 0 ; i<u_nImageIOStatusCnt ; i++)	{		int io_swtich = (IO_Select>>i) & 0x1;		int tmp;		if(io_swtich && IO_Num[i]!=0)			tmp = g_pRxCNCData->s_mlc_o_bit[IO_Num[i]-1];		else if(!io_swtich && IO_Num[i]!=0)			tmp = g_pRxCNCData->s_mlc_i_bit[IO_Num[i]];		else if(IO_Num[i]==0) tmp=0;					//printf("%d : io_swtich=%d tmp=%d\n",i+1,io_swtich,tmp);		//printf("g_pRxCNCData->s_mlc_i_bit[%d] = %d\n",IO_Num[i],g_pRxCNCData->s_mlc_i_bit[IO_Num[i]]);		//printf("g_pRxCNCData->s_mlc_o_bit[%d] = %d\n",IO_Num[i]-1,g_pRxCNCData->s_mlc_o_bit[IO_Num[i]-1]);				if(IO_staus[i] != tmp)		{			IO_staus[i] = tmp;			u_pwndImageIOStatus[i]->SetPropValueT("imagepath",IOStatusImage[tmp]);				u_pwndImageIOStatus[i]->Update();		}	}			}