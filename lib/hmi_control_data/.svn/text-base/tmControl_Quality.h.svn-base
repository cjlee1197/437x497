/*===========================================================================+
|  Class    : CtmControl_Quality			                                 |
|  Task     : Quality Service Function 				    	         		 |
|----------------------------------------------------------------------------|
|  Compile  : G++(GCC)3.2                                                    |
|  Link     : G++(GCC)3.2                                                    |
|  Call     :                                                                |
|----------------------------------------------------------------------------|
|  Author   : James	                                                         |
|  Version  : V1.00                                                          |
|  Creation : 05/11/2008	                                                 |
|  Revision : 05/11/2008				                                     |
+===========================================================================*/
#ifndef	D_CtmControl_Quality
#define	D_CtmControl_Quality
#include	"../../tmcontrol.h"
#include	"../../tmpackclass.h"
#include	"../../package.h"
#include	"../../tmcontrol.h"
#include	"../../qualitycontrol.h"
#include	"../libControl.h"

class	CtmControl_Quality: public	CtmControl
{
	DECLARE_DYNCREATE(CtmControl_Quality)
	public:
		CtmControl_Quality();
		~CtmControl_Quality();
		
	public:
		/*virtual*/BOOL	AddControl(void *pParas[])						;
		/*virtual*/BOOL	ModifyControl(void *pParas[]) 					;
		/*virtual*/BOOL	FindControl(void *pParas[], void *pFindPara)	;
		/*virtual*/BOOL	DeleteControl(void *pDeletePara = NULL)			;
		/*virtual*/BOOL	FixControl(void *pFixPara)						;
		//CtmOilQuality Function
		/*virtual*/void			InitControl()										;
		/*virtual*/int			GetMoniCount(int nDataType = -1)					;
		/*virtual*/double		SetData(int nDataType, int nFunctionType) 			;
		/*virtual*/void			Clear()												;
		//quality Control Function
		/*virtual*/int			GetDataCurve(int nDataType, int nFunctionType, void* pData);
		/*virtual*/BOOL			SaveAs(tmStorageType StorageType)					;
		/*virtual*/BOOL			ReadAs(tmStorageType StorageTypeSrc, tmStorageType StorageTypeDst =STORAGE_TYPE_SRAM);

	private:
		pthread_mutex_t		m_MutexQuality;				//多線程鎖
	protected:
		/*virtual*/void	GetDataBasicFunction(int nFunctionType, void* pMachineDataType, 
									double* pSingleOutData);
		/*virtual*/void*	GetMachineDataType(int nDataType, int nIndex);
		/*virtual*/void	GetDataOil(int nType, tmOIL_MONI2EX* pMoni2, double* pData);
		
		/*virtual*/void	GetReal();														//	實際值
		/*virtual*/void	GetFileReal(int nIndex);										//	文件中的實際值
		/*virtual*/void	GetSig();														//	sig
		/*virtual*/void	GetLimitUp();													//	上限值(根據誤差量和誤差百分比)
		/*virtual*/void	GetLimitLower();												//	下限值(根據誤差量和誤差百分比)
		/*virtual*/void	GetLimitUpB();													//	上限值(根據誤差量和誤差百分比)
		/*virtual*/void	GetLimitLowerB();												//	下限值(根據誤差量和誤差百分比)
		/*virtual*/tmOIL_MONI2EX	GetStandardAvg();											//	標準差		
		/*virtual*/void	GetAvg();														//	平均值        
		/*virtual*/void	GetAvgLimitUp();												//	平均值的上限(平均值加上標準差)
		/*virtual*/void	GetAvgLimitLower();												//	平均值的下限(平均值減去標準差)		                                                                  
		/*virtual*/tmOIL_MONI2EX	GetSum();													//	和
		/*virtual*/tmOIL_MONI2EX	GetSqrSum();												//	平方和
		
		/*virtual*/void	SetLimitUp();
		/*virtual*/void	SetLimitLower();
		/*virtual*/void	SetLimit();
				void	SetLimitUpB();
				void	SetLimitLowerB();
	private:
		int		m_nMoniCount;		
		tmOIL_MONI2EX	m_tmMoni2;
		tmOIL_MONI2EX   m_Moni2Standard;
	protected:
		int		m_nState;
		static	char*	m_pszLastID[];		    	
		static	char*	m_pszLimitUpID[];     	
		static	char*	m_pszLimitLowerID[];
		static	char*	m_pszPctID[];
		static	char*	m_pszDeltaID[];

		static	char*	m_pszLastIDB[];		    	
		static	char*	m_pszLimitUpIDB[];     	
		static	char*	m_pszLimitLowerIDB[];
		static	char*	m_pszPctIDB[];
		static	char*	m_pszDeltaIDB[];
	public:
		//====================
		//	override the function that are defined in the CtmPackClass
		//====================
		int		CreateSelf();
		int		FreeSelf();
};	

#ifndef	D_BEOBJECT_CTMCONTRL_QUALITY	//	defineName=D_BEOBJECT_+CASE(ClassName) 
extern	"C"	CObject*	CreateInstance(char* Name);
extern	"C"	void		ReleaseInstance(CObject* pInstance);
#endif

#endif

