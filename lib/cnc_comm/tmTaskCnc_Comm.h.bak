/*===========================================================================+
|  Class 	: TaskCnc_Comm                    				 	 		 	 |
|  Task     : TaskCnc_Comm Utilities Head File	                 	 		 |
|----------------------------------------------------------------------------|
|  Compile  : G++(GCC) V3.2                                                  |
|  Link     : G++(GCC) V3.2                                                  |
|  Call     :                                                                |
|----------------------------------------------------------------------------|
|  Author   : Sunny  	                                                     |
|  Version  : V1.00                                                          |
|  Creation : 05/10/2012                                                     |
|  Revision :                                                                |
+===========================================================================*/
#ifndef		D__TMTASKCNCCOMM_V01
#define		D__TMTASKCNCCOMM_V01
#include	"../../taskhost.h"
#include	"../../main.h"
#include	"../../ethnet.h"
#include	"../libComm.h"
//	0: CTask
//	1: CTaskComm, CtmPackClass
//	2: CtmTaskHost

/*const	int		CONST_REQ_ACTUAL 		= 1;		//即時資料請求
const	int		CONST_REQ_READMOTOR 	= 2;		//馬達參數資料讀請求
const	int		CONST_REQ_WRITEMOTOR 	= 3;		//馬達參數資料寫請求
const	int		CONST_REQ_ALARM 		= 4;		//警報資料 暫時是沒有請求，只有接收
const	int		CONST_REQ_CURVE 		= 5;		//曲線資料請求
const	int		CONST_REQ_COMMAND		= 6;		//動作命令請求
const	int		CONST_REQ_LINESTATUS	= 7;		//聯線狀態請求
const	int		CONST_REQ_MOLDSETSTATUS = 8;		//模組更新完成確認
const	int		CONST_REQ_MOLDSET	 	= 9;		//模組更新請求
const	int		CONST_REQ_TEMPER 		= 10;		//溫度數據請求
const	int		CONST_REQ_TUNEPROG 		= 11;		//調機程式

const	int		CONST_RES_ACTUAL 		= 1001;		//即時資料回饋
const	int		CONST_RES_READMOTOR 	= 1002;		//馬達參數資料讀回饋
const	int		CONST_RES_WRITEMOTOR 	= 1003;		//馬達參數資料寫回饋
const	int		CONST_RES_ALARM 		= 1004;		//警報資料
const	int		CONST_RES_CURVE 		= 1005;		//曲線資料回饋
const	int		CONST_RES_COMMAND		= 1006;		//動作命令回饋
const	int		CONST_RES_LINESTATUS	= 1007;		//聯線狀態回饋  暫時沒有使用。
const	int		CONST_RES_MOLDSETSTATUS = 1008;		//模組資料更新狀態回饋
const	int		CONST_RES_MOLDSET	 	= 1009;		//模組資料回饋
const	int		CONST_RES_TEMPER 		= 1010;		//溫度資料回饋

#define		DSP28PROTOCOL_HEADER_MAXSIZE	12
#define		DSP28PROTOCOL_FOOTER_MAXSIZE	2
#define		DSP28PROTOCOL_HEADER_ELEMENTNUM_POS	10
#define		DSP28PROTOCOL_HEADER_CONTEXT	0x8899	//request 
#define		DSP28PROTOCOL_FOOTER_CONTEXT	0x6688
#define		DSP28PROTOCOL_HEADER_CONTEXT_S	0x5588	//response
#define		DSP28PROTOCOL_FOOTER_CONTEXT_S	0x1166
*/
/*class	CtmCncCommProtocol:  public CtmProtocol
{
	DECLARE_DYNCREATE(CtmCncCommProtocol)
	public:
		CtmCncCommProtocol()
		{
			m_nHeaderPos	= 0;       
			m_nFooterPos	= 0;
			m_nDataSizePos	= 2;
			m_nTypePos		= 4;
			m_nDataCountPos	= 6; 
			m_nCyclePos		= 8; 
			m_nElementNumPos= 10;
		}
		~CtmCncCommProtocol()
		{
		}
	public:
		void	SetSendType(int nType)
		{
			m_nSendType	= nType;
			WORD wTemp	= m_nSendType;
			m_SendHeader.SetPartValue(m_nTypePos, 	&wTemp, sizeof(wTemp));
		}
		void	SetRevType(int nType)
		{
			m_nRevType	= nType;	
			WORD wTemp	= m_nRevType;
			m_RevHeader.SetPartValue(m_nTypePos, 	&wTemp, sizeof(wTemp));
		}
	    int		InitSend()
	    {
	    	m_SendHeader.SetMaxSize(DSP28PROTOCOL_HEADER_MAXSIZE);	//	12 the Rev header
			m_SendHeader.SetSize(DSP28PROTOCOL_HEADER_MAXSIZE);		//	12 the Rev header
			
			m_SendFooter.SetMaxSize(DSP28PROTOCOL_FOOTER_MAXSIZE);	//	2 the Rev footer
			m_SendFooter.SetSize(DSP28PROTOCOL_FOOTER_MAXSIZE);		//	2 the Rev footer
			
			WORD	wTemp;
			wTemp	= DSP28PROTOCOL_HEADER_CONTEXT;
			m_SendHeader.SetPartValue(m_nHeaderPos, &wTemp, sizeof(wTemp));
			SetSendType(m_nSendType);	
			wTemp	= DSP28PROTOCOL_FOOTER_CONTEXT;
			m_SendFooter.SetPartValue(m_nFooterPos, &wTemp, sizeof(wTemp));
			return 0;
		}
		int		InitRev()
		{
			m_RevHeader.SetMaxSize(DSP28PROTOCOL_HEADER_MAXSIZE);	//	12 the Rev header
			m_RevHeader.SetSize(DSP28PROTOCOL_HEADER_MAXSIZE);		//	12 the Rev header
			
			m_RevFooter.SetMaxSize(DSP28PROTOCOL_FOOTER_MAXSIZE);	//	2 the Rev footer	
			m_RevFooter.SetSize(DSP28PROTOCOL_FOOTER_MAXSIZE);		//	2 the Rev footer
			
			SetRevType(m_nRevType);
			return 0;
		}
		int		Init_SSend()
	    {
	    	m_SendHeader.SetMaxSize(DSP28PROTOCOL_HEADER_MAXSIZE);	//	12 the Rev header
			m_SendHeader.SetSize(DSP28PROTOCOL_HEADER_MAXSIZE);		//	12 the Rev header
			
			m_SendFooter.SetMaxSize(DSP28PROTOCOL_FOOTER_MAXSIZE);	//	2 the Rev footer	
			m_SendFooter.SetSize(DSP28PROTOCOL_FOOTER_MAXSIZE);		//	2 the Rev footer
			
			WORD	wTemp;
			wTemp	= DSP28PROTOCOL_HEADER_CONTEXT_S;
			m_SendHeader.SetPartValue(m_nHeaderPos, &wTemp, sizeof(wTemp));
			SetSendType(m_nSendType);	
			wTemp	= DSP28PROTOCOL_FOOTER_CONTEXT_S;
			m_SendFooter.SetPartValue(m_nFooterPos, &wTemp, sizeof(wTemp));
			return 0;
		}
		int		Init_SRev()
		{
			m_RevHeader.SetMaxSize(DSP28PROTOCOL_HEADER_MAXSIZE);	//	12 the Rev header
			m_RevHeader.SetSize(DSP28PROTOCOL_HEADER_MAXSIZE);		//	12 the Rev header
			
			m_RevFooter.SetMaxSize(DSP28PROTOCOL_FOOTER_MAXSIZE);	//	2 the Rev footer	
			m_RevFooter.SetSize(DSP28PROTOCOL_FOOTER_MAXSIZE);		//	2 the Rev footer
			
			SetRevType(m_nRevType);
			return 0;
		}
	protected:
		int		m_nHeaderPos;
		int		m_nFooterPos;
		int		m_nDataSizePos;
		int		m_nTypePos;
		int		m_nDataCountPos;
		int		m_nCyclePos;
		int		m_nElementNumPos;
};*/

//IMPLEMENT_DYNCREATE(CtmCncCommProtocol, CtmProtocol)

class  CtmTaskCnc_Comm: public CTaskHost
{
	DECLARE_DYNCREATE(CtmTaskCnc_Comm)
	public:
		CtmTaskCnc_Comm();
		~CtmTaskCnc_Comm();
	public:
		//====================
		//	override the function that are defined in the CtmPackClass
		//====================
		int		CreateSelf();
		int		FreeSelf();
		int		WriteValue(int type ,int s_arr ,int len ,void* data);
		//====================
		//	override the function that are defined in the CtmTaskHost
		//====================
		//	request value
		//	stop request

		//	write the value to the motor & host; the values are from database

	
		
		//====================
		//	override the function that are defined in the CTask
		//====================
		void    Run();
			
	protected:
	
	private:
		//====================
		//	the static functions
		//====================
		//	the thread function must be a staic function
		static 	void	_Open(void *pData);
		static	void  pthread_ethernet_file();
		static 	void	ResValueFunc(char *pData, int nLength);									// 	接收數據  
		
		BOOL	RestartNet(BOOL bFlag = TRUE);
		int		GetBlockToDsp28(WORD wIndex, int nType);
	protected:
		BOOL		m_bDiagFlag;
		int			m_nDiagReqNum;
	private:
	    //====================
		//	the static variants
		//====================
	   static	CtmTaskCnc_Comm*		m_pSelf;			//	指向本身的指針  
		static	WORD	m_wSourceIPPort[5];
		static	WORD	m_wDesIPPort[5];
	  pthread_mutex_t m_mutex;
	    //====================
		//	the common variants
		//====================
		ETHERNET		m_ethernet;		
		int 			m_nConnecting;					//連接動作狀態  
		pthread_t 		m_OpenThreadID;
		pthread_t 		m_UpdateFileThreadID;
		static pthread_mutex_t	mutex_Msg;						//消息進程鎖
		pthread_attr_t  m_ThreadAttr;
		long	m_lFirstTime;	
		//long	m_lCheckQuickTimer;
		long	m_lUpdateTimer;
		long	m_lActualDataID[100];
		long	m_lActualDataCount;
		long	m_lActualReqCycTime;
		long	m_lActualRealCycTime;
		
		long	m_lOnLineTime;
		long	m_lTestTime;
		
		
		
		BYTE	m_RxBuffer[4096];						//	rev buffer
		BYTE	m_TxBuffer[4096];						//	send buffer
		
	
};

#ifndef	D_BEOBJECT_CtmTaskCnc_Comm	//	defineName=D_BEOBJECT_+CASE(ClassName) 
extern	"C"	CObject*	CreateInstance(char* Name);
extern	"C"	void		ReleaseInstance(CObject* pInstance);
#endif

#endif

